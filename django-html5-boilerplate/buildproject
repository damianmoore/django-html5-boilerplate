#!/usr/bin/env python
import sys
import os
import subprocess
import shutil
from django import VERSION
from django.core import management
from tempfile import mkstemp


DJANGO_1_4 = True if VERSION[0] >= 1 and VERSION[1] >= 4 else False

def buildproject(argv=[]):
    if len(argv) < 2:
        proj_dir = os.path.abspath(os.getcwd())
        in_proj_dir = True
    else:
        proj_dir = os.path.abspath(os.path.join(os.getcwd(), argv[1]))
        in_proj_dir = False
    proj_name = os.path.split(proj_dir)[-1]
    manage_py = [proj_dir, 'manage.py']
    if not os.path.exists(os.path.join(*manage_py)) and DJANGO_1_4:
        manage_py.insert(1, '..')
    manage_py = os.path.abspath(os.path.join(*manage_py))
    if not os.path.isfile(manage_py):
        print "Not a valid Django project"
        return
    boilerplate_dir = [proj_dir, '..', 'html5boilerplate']
    if not os.path.exists(os.path.join(*boilerplate_dir)) and DJANGO_1_4:
        boilerplate_dir.insert(2, '..')
    boilerplate_dir = os.path.abspath(os.path.join(*boilerplate_dir))

    print 'Removing old publish directories...'
    if os.path.exists(os.path.join(proj_dir, 'templates_publish')):
        shutil.rmtree(os.path.join(proj_dir, 'templates_publish'))
        os.mkdir(os.path.join(proj_dir, 'templates_publish'))
    if os.path.exists(os.path.join(proj_dir, 'static_publish')):
        shutil.rmtree(os.path.join(proj_dir, 'static_publish'))
        os.mkdir(os.path.join(proj_dir, 'static_publish'))
    if os.path.exists(os.path.join(proj_dir, 'static_tmp')):
        shutil.rmtree(os.path.join(proj_dir, 'static_tmp'))
        
    print 'Running collectstatic...'
    #management.setup_environ(settings)
    #management.execute_from_command_line(['collectstatic', '--noinput',])
    
    #from django.contrib.staticfiles.management.commands.collectstatic import Command
    #collectstatic_command = Command()
    #collectstatic_command.handle_noargs(interactive=False)
    
    subprocess.call(['python', manage_py, 'collectstatic', '--noinput'])
    
    os.rename(os.path.join(proj_dir, 'static_publish'), os.path.join(proj_dir, 'static_tmp'))
        
    cwd = os.getcwd()
    os.chdir(os.path.join(boilerplate_dir, 'build'))
    print 'Starting Ant build...'
    try:
        subprocess.call(['ant', '-version'])
    except OSError:
        print 'You do not appear to have \'ant\' installed'
        return
    #retcode = subprocess.call(['ant', 'minify'])
    retcode = subprocess.call(['ant', 'build'])
    if retcode > 0:
        print 'Ant build failed'
        return
    os.chdir(cwd)
    
    print 'Moving minified templates to Django project (templates_publish)...'
    os.rename(os.path.join(boilerplate_dir, 'publish', proj_name, 'templates'), os.path.join(proj_dir, 'templates_publish'))
    
    print 'Moving CSS, JS and images into Django project...'
    os.rename(os.path.join(boilerplate_dir, 'publish', proj_name, 'static_tmp'), os.path.join(proj_dir, 'static_publish'))
    
    shutil.rmtree(os.path.join(boilerplate_dir, 'publish'))
    shutil.rmtree(os.path.join(proj_dir, 'static_tmp'))
    
    print 'Updating file paths...'
    for root, dirnames, filenames in os.walk(os.path.join(proj_dir, 'templates_publish')):
        for filename in filenames:
            file_path = os.path.join(proj_dir, 'templates_publish', filename)
            fh, abs_path = mkstemp()
            new_file = open(abs_path,'w')
            old_file = open(file_path)
            for i, line in enumerate(old_file):
                if '%s/static_tmp/'%proj_name in line:
                    new_file.write(line.replace('%s/static_tmp/'%proj_name, '{{ STATIC_URL }}'))
                else:
                    new_file.write(line)
            new_file.close()
            os.close(fh)
            old_file.close()
            os.remove(file_path)
            shutil.move(abs_path, file_path)
    
    
if __name__ == "__main__":
    buildproject(sys.argv)

